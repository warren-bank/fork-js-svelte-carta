import{getHighlighter as t,bundledThemes as a,bundledLanguages as e}from"https://esm.sh/shiki@1.9.0";const i="cartamd",n="carta-light",r="carta-dark",o=async()=>({light:structuredClone((await import("./theme-light-BmhFzLij.js")).default),dark:structuredClone((await import("./theme-dark-D4HVVenm.js")).default)});async function s({grammarRules:e,highlightingRules:n,theme:r,shiki:o}){const s=(t,a)=>{"light"===t.type?(t.tokenColors||=[],t.tokenColors.unshift(...a.map((({light:t})=>t)))):(t.tokenColors||=[],t.tokenColors.unshift(...a.map((({dark:t})=>t))))},c=o?.themes??[],l=o?.langs??[],h=await t({themes:c,langs:l}),w=(await import("./markdown-BucqidEc.js")).default;if(((t,a)=>{t.repository={...w.repository,...Object.fromEntries(a.map((({name:t,definition:a})=>[t,a])))};for(const e of a)"block"===e.type?t.repository.block.patterns.unshift({include:"#"+e.name}):t.repository.inline.patterns.unshift({include:"#"+e.name})})(w,e),await h.loadLanguage(w),m(r)){let t;t=d(r)?r:(await a[r]()).default,s(t,n),await h.loadTheme(t)}else{const{light:t,dark:e}=r;let i,o;i=d(t)?t:(await a[t]()).default,o=d(e)?e:(await a[e]()).default,s(i,n),s(o,n),await h.loadTheme(i),await h.loadTheme(o)}return{theme:r,lang:i,...h}}const c=t=>Object.keys(e).includes(t),l=t=>Object.keys(a).includes(t),h=t=>"object"==typeof t&&"light"in t&&"dark"in t,m=t=>!h(t),d=t=>"object"==typeof t,w=async(t,a)=>{const e=(t=>{const a=new Set,e=/```(\w+)$/gm;let i;for(;i=e.exec(t);)a.add(i[1]);return a})(a=a.replaceAll("\r\n","\n")),i=t.getLoadedLanguages();let n=0;for(const a of e)c(a)&&!i.includes(a)&&(await t.loadLanguage(a),i.push(a),n=1);return{updated:n}};export{i as customMarkdownLangName,r as defaultDarkThemeName,n as defaultLightThemeName,c as isBundleLanguage,l as isBundleTheme,h as isDualTheme,m as isSingleTheme,d as isThemeRegistration,o as loadDefaultTheme,s as loadHighlighter,w as loadNestedLanguages};
