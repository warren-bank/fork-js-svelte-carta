const e=e=>({async onLoad({carta:e}){var a;const n=await e.highlighter();n&&(await n.loadLanguage("tex"),null==(a=e.input)||a.update())},transformers:[{execution:"async",type:"rehype",transform({carta:n,processor:t}){t.use(a,{carta:n,options:e})}}],listeners:[["carta-render",async a=>{(await import("./browser-CEksbyWR-C1S2D2P-.js")).processTikzScripts(a,e)}]],grammarRules:[{name:"tikz",type:"block",definition:{begin:"(^|\\G)(\\s*)(`{3,}|~{3,})\\s*(?i:(tikz)((\\s+|:|,|\\{|\\?)[^`]*)?$)",beginCaptures:{3:{name:"punctuation.definition.markdown"},4:{name:"fenced_code.block.language.markdown"},5:{name:"fenced_code.block.language.attributes.markdown"}},end:"(^|\\G)(\\2|\\s{0,3})(\\3)\\s*$",endCaptures:{3:{name:"punctuation.definition.markdown"}},name:"markup.fenced_code.block.markdown",patterns:[{begin:"(^|\\G)(\\s*)(.*)",contentName:"meta.embedded.block.latex",patterns:[{include:"text.tex"}],while:"(^|\\G)(?!\\s*([`~]{3,})\\s*$)"}]}}]}),a=({carta:e,options:a})=>async n=>(await import("./browser-CEksbyWR-C1S2D2P-.js")).browserTikzTransform(n,e,a);export{e as default};
